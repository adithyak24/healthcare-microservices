spring.application.name=billing-service

server.port=9000 
# HTTP port for billing-service, if it has other REST APIs. 
# If billing-service is purely gRPC, this server.port might not even be strictly necessary
# unless you have Actuator endpoints or other Spring Boot web features enabled.

# gRPC Server Configuration
grpc.server.port=9001

# Add other billing-service specific properties below (e.g., database if needed)
# spring.datasource.url=...
# spring.datasource.username=...
# spring.datasource.password=...
# spring.jpa.hibernate.ddl-auto=update

# Stripe API Key - REPLACE WITH YOUR ACTUAL SECRET KEY
stripe.api.key=${STRIPE_API_KEY:sk_test_your_stripe_secret_key_here}

# Base URL for your frontend (for Stripe success/cancel redirects)
# This is needed so Stripe can redirect the user back to your application
frontend.base.url=http://localhost:3000

# H2 Database Configuration (In-Memory) - REPLACED WITH POSTGRESQL
# spring.h2.console.enabled=true
# spring.h2.console.path=/h2-console
# spring.datasource.url=jdbc:h2:mem:billingdb;DB_CLOSE_DELAY=-1
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# PostgreSQL Configuration for Billing Service
spring.datasource.url=jdbc:postgresql://postgres:5432/billing_db
spring.datasource.username=postgres
spring.datasource.password=root
spring.datasource.driverClassName=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=create
# Use 'update' for development (creates/updates schema based on entities).
# Use 'validate' (validates schema, makes no changes) or 'none' (makes no changes) for production.

# Kafka Producer Configuration
spring.kafka.producer.bootstrap-servers=kafka:29092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# spring.kafka.producer.properties.spring.json.add.type.headers=true
spring.kafka.producer.properties.spring.json.type.mapping=paymentStatusUpdateEvent:com.pm.billingservice.dto.PaymentStatusUpdateEvent

# Topic for payment status updates
kafka.topic.payment-status-updates=payment-status-updates

# Stripe Webhook Secret - REPLACE WITH YOUR ACTUAL WEBHOOK SIGNING SECRET from Stripe Dashboard
# Get this from your Stripe Dashboard -> Webhooks -> [Your Webhook] -> Signing secret
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET:whsec_your_webhook_secret_here}

# Kafka Consumer Configuration
spring.kafka.consumer.bootstrap-servers=kafka:29092
spring.kafka.consumer.group-id=billing_service_default_group # Default group-id, can be overridden in @KafkaListener
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Ensure this package list covers all DTOs used by Kafka consumers in this service
spring.kafka.consumer.properties.spring.json.trusted.packages=com.pm.billingservice.kafka.dto,com.pm.billingservice.dto
spring.kafka.consumer.properties.spring.json.use.type.headers=false

# Logging Configuration
logging.level.root=INFO
logging.level.com.pm.billingservice=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.security=DEBUG

# JWT Settings (for validating tokens from patient-service)
# This key MUST be at least 256 bits (32 ASCII characters if not Base64 encoded, or a 32-byte Base64 encoded string)
# It must be IDENTICAL to the one used in patient-service for signing tokens.
app.jwt.secret=tWHIaUjqqsxZaJp+03Sh+1VdpEs2XYQVQ5Lw6pi3afs=
# JWT expiration time in milliseconds (e.g., 3600000 for 1 hour) - This is not directly used by billing-service for validation but good for reference
# app.jwt.expiration-ms=28800000

# OAuth2 Resource Server Configuration (for validating JWTs from Auth0) - COMMENTED OUT
# spring.security.oauth2.resourceserver.jwt.issuer-uri=https://dev-8n8hmdpdvrtyezom.us.auth0.com/
# Ensure the audience matches what is configured in your Auth0 API and requested by the client
# This might be a specific audience for billing-service, or a shared one.
# spring.security.oauth2.resourceserver.jwt.audience=http://localhost:9000/api/billing/

# Resilience4j Circuit Breaker Configuration
# Circuit breaker for Stripe API calls
resilience4j.circuitbreaker.instances.stripe-api.register-health-indicator=true
resilience4j.circuitbreaker.instances.stripe-api.sliding-window-size=10
resilience4j.circuitbreaker.instances.stripe-api.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.stripe-api.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.stripe-api.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.stripe-api.wait-duration-in-open-state=30s
resilience4j.circuitbreaker.instances.stripe-api.sliding-window-type=count_based
resilience4j.circuitbreaker.instances.stripe-api.automatic-transition-from-open-to-half-open-enabled=true

# Retry configuration for Stripe API
resilience4j.retry.instances.stripe-api.max-attempts=3
resilience4j.retry.instances.stripe-api.wait-duration=2s
resilience4j.retry.instances.stripe-api.enable-exponential-backoff=true
resilience4j.retry.instances.stripe-api.exponential-backoff-multiplier=2

# Timeout configuration for Stripe API
resilience4j.timelimiter.instances.stripe-api.timeout-duration=10s

# Circuit breaker for patient service communication
resilience4j.circuitbreaker.instances.patient-service.register-health-indicator=true
resilience4j.circuitbreaker.instances.patient-service.sliding-window-size=10
resilience4j.circuitbreaker.instances.patient-service.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.patient-service.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.patient-service.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.patient-service.wait-duration-in-open-state=15s
resilience4j.circuitbreaker.instances.patient-service.sliding-window-type=count_based

# Actuator endpoints for monitoring
management.endpoints.web.exposure.include=health,circuitbreakers,retries
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true