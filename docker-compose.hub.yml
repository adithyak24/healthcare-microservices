version: '3.8'

services:
  # ===============================
  # Infrastructure Services
  # ===============================
  
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: patients_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.0
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - microservices-network

  # ===============================
  # Microservices (Docker Hub Images)
  # ===============================

  patient-service:
    image: ${DOCKER_HUB_USERNAME:-adithya3698}/healthcare-patient-service:${VERSION:-latest}
    container_name: patient-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "4000:4000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/patients_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_DATA_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      GRPC_CLIENT_BILLING_SERVICE_ADDRESS: static://billing-service:9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  billing-service:
    image: ${DOCKER_HUB_USERNAME:-adithya3698}/healthcare-billing-service:${VERSION:-latest}
    container_name: billing-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/billing_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      FRONTEND_BASE_URL: ${FRONTEND_BASE_URL:-http://localhost:3000}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  analytics-service:
    image: ${DOCKER_HUB_USERNAME:-adithya3698}/healthcare-analytics-service:${VERSION:-latest}
    container_name: analytics-service
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "9002:9002"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/analytics_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  notification-service:
    image: ${DOCKER_HUB_USERNAME:-adithya3698}/healthcare-notification-service:${VERSION:-latest}
    container_name: notification-service
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9003:9003"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SPRING_MAIL_FROM: ${SPRING_MAIL_FROM:-adithya3698@gmail.com}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9003/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  api-gateway:
    image: ${DOCKER_HUB_USERNAME:-adithya3698}/healthcare-api-gateway:${VERSION:-latest}
    container_name: api-gateway
    depends_on:
      - patient-service
      - billing-service
    ports:
      - "4004:4004"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_REDIS_HOST: redis
      PATIENT_SERVICE_URL: http://patient-service:4000
      BILLING_SERVICE_URL: http://billing-service:9000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4004/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  # ===============================
  # Frontend Applications
  # ===============================

  patient-portal:
    image: ${DOCKER_HUB_USERNAME:-adithya3698}/healthcare-patient-portal:${VERSION:-latest}
    container_name: patient-portal
    depends_on:
      - api-gateway
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_BASE_URL: http://localhost:4004
      REACT_APP_PATIENT_SERVICE_URL: http://localhost:4000
      REACT_APP_BILLING_SERVICE_URL: http://localhost:9000
    networks:
      - microservices-network

  receptionist-portal:
    image: ${DOCKER_HUB_USERNAME:-adithya3698}/healthcare-receptionist-portal:${VERSION:-latest}
    container_name: receptionist-portal
    depends_on:
      - api-gateway
    ports:
      - "3001:3001"
    environment:
      REACT_APP_API_BASE_URL: http://localhost:4004
      REACT_APP_PATIENT_SERVICE_URL: http://localhost:4000
      REACT_APP_BILLING_SERVICE_URL: http://localhost:9000
    networks:
      - microservices-network

# ===============================
# Volumes
# ===============================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  elasticsearch_data:
    driver: local

# ===============================
# Networks
# ===============================
networks:
  microservices-network:
    driver: bridge 