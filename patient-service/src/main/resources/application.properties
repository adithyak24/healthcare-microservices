# gRPC client configuration for patient-service calling billing-service
grpc.client.billing-service.address=static://localhost:9001
grpc.client.billing-service.negotiation-type=plaintext
# You might want to configure deadlines, retry policies, etc. here in a real app

spring.application.name=patient-service
spring.datasource.url=jdbc:postgresql://localhost:5432/patients_db
spring.datasource.username=postgres
spring.datasource.password=root
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
server.port=4000
logging.level.org.springframework.jdbc=DEBUG
logging.level.com.zaxxer.hikari=DEBUG
logging.level.root=info
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.com.pm.patientservice=DEBUG
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG

# Kafka Configuration (unified for producer and consumer)
# This will be overridden by environment variables in Docker.
spring.kafka.bootstrap-servers=kafka:29092

# Kafka producer configuration
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# spring.kafka.producer.properties.spring.json.type.mapping=event:com.pm.patientservice.kafka.dto.PatientEventDTO # Optional: explicit type mapping if needed

# Kafka Consumer Configuration (GLOBAL - applies to all listeners unless overridden by a specific factory)
spring.kafka.consumer.group-id=patient-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer

# Properties for the JsonDeserializer (GLOBAL)
spring.kafka.consumer.properties.spring.json.trusted.packages=com.pm.patientservice.kafka.dto,com.pm.common.event,com.pm.billingservice.kafka.dto,com.pm.billingservice.dto,com.pm.patientservice.kafka.dto.external
spring.kafka.consumer.properties.spring.json.use.type.headers=false
spring.kafka.consumer.properties.spring.json.value.default.type=com.pm.patientservice.kafka.dto.VisitPaymentCompletedEvent
# spring.kafka.consumer.properties.spring.json.type.mapping=com_pm_billingservice_kafka_dto_VisitPaymentCompletedEvent:com.pm.patientservice.kafka.dto.VisitPaymentCompletedEvent,com_pm_billingservice_kafka_dto_InitialConsultationPaymentCompletedEvent:com.pm.patientservice.kafka.dto.InitialConsultationPaymentCompletedEvent
# If patient-service primarily listens to payment-initiated-events and expects PaymentInitiatedEvent from billing-service when headers are missing:
# spring.kafka.consumer.properties.spring.json.value.default.type=com.pm.billingservice.kafka.dto.PaymentInitiatedEvent

# Specific topic configuration (if needed for specific listeners later, usually done in Java config)
kafka.topic.payment-status-updates=payment-status-updates

# Keep other configurations if needed
spring.data.redis.host=localhost
spring.data.redis.port=6379

# JWT Settings
# IMPORTANT: For production, generate a strong, secure secret (e.g., using a password generator or `openssl rand -base64 32`)
# This key MUST be at least 256 bits (32 ASCII characters if not Base64 encoded, or a 32-byte Base64 encoded string)
app.jwt.secret=tWHIaUjqqsxZaJp+03Sh+1VdpEs2XYQVQ5Lw6pi3afs=
# JWT expiration time in milliseconds (e.g., 3600000 for 1 hour)
app.jwt.expiration-ms=28800000
# For longer sessions, increase this value (e.g., 86400000 for 24 hours)

# Auth0 Resource Server Configuration (COMMENTED OUT FOR LOCAL JWT VALIDATION)
# spring.security.oauth2.resourceserver.jwt.issuer-uri=https://dev-8n8hmdpdvrtyezom.us.auth0.com/
# spring.security.oauth2.resourceserver.jwt.audience=http://localhost:4004/api/patients/

# Resilience4j Circuit Breaker Configuration
# Circuit breaker for billing service calls
resilience4j.circuitbreaker.instances.billing-service.register-health-indicator=true
resilience4j.circuitbreaker.instances.billing-service.sliding-window-size=10
resilience4j.circuitbreaker.instances.billing-service.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.billing-service.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.billing-service.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.billing-service.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.billing-service.sliding-window-type=count_based
resilience4j.circuitbreaker.instances.billing-service.automatic-transition-from-open-to-half-open-enabled=true

# Retry configuration for billing service
resilience4j.retry.instances.billing-service.max-attempts=3
resilience4j.retry.instances.billing-service.wait-duration=1s
resilience4j.retry.instances.billing-service.enable-exponential-backoff=true
resilience4j.retry.instances.billing-service.exponential-backoff-multiplier=2

# Timeout configuration for billing service
resilience4j.timelimiter.instances.billing-service.timeout-duration=5s

# Actuator endpoints for monitoring
management.endpoints.web.exposure.include=health,circuitbreakers,retries
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true